[{"path":"https://nsgrantham.github.io/ggbraid/articles/temps.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Average Daily Temperatures","text":"ggbraid provides data frame called temps, daily average temperatures New York San Francisco 2021 recorded US National Weather Service (NWS) weather.gov.1 city New York San Francisco, date calendar date YYYY-MM-DD format, avg average temperature recorded degrees Fahrenheit (°F) rounded nearest half degree.2 daily average temperatures look like?  see much higher variability temperatures New York compared San Francisco. makes sense — New York Northeastern US experiences hot, humid summers cold, occassionally snowy winters. San Francisco West Coast Mediterranean climate means temperature change much season season. proceed , let’s clean plot bit assign variable p can reuse throughout vignette.  Much better.","code":"library(ggplot2) library(ggbraid) library(dplyr) library(tidyr)  data(temps)  temps #> # A tibble: 730 × 3 #>    city     date         avg #>    <chr>    <date>     <dbl> #>  1 New York 2021-01-01  36.5 #>  2 New York 2021-01-02  43.5 #>  3 New York 2021-01-03  36   #>  4 New York 2021-01-04  39   #>  5 New York 2021-01-05  39   #>  6 New York 2021-01-06  37.5 #>  7 New York 2021-01-07  35.5 #>  8 New York 2021-01-08  32   #>  9 New York 2021-01-09  30.5 #> 10 New York 2021-01-10  35   #> # … with 720 more rows ggplot(temps) +     geom_line(aes(x = date, y = avg, linetype = city)) p <- ggplot() +   geom_line(aes(x = date, y = avg, linetype = city), data = temps) +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b\") +   scale_y_continuous(     breaks = seq(20, 90, by = 10),     labels = function(x, ...) format(paste(x, \"°F\"), ...),     limits = c(18, 90)   ) +   guides(fill = \"none\") +   labs(     title = \"Average Daily Temperatures in 2021\",     linetype = NULL,     y = NULL,     x = NULL    ) +   theme_minimal(base_size = 14) +   theme(     plot.title = element_text(size = 16),     plot.title.position = \"plot\",     legend.position = c(0.75, 1.06),     legend.direction = \"horizontal\",     legend.key.size = unit(2, \"line\"),     legend.text = element_text(size = 12),     panel.grid.major.x = element_line(size = 0.4),     panel.grid.major.y = element_line(size = 0.4),     panel.grid.minor.x = element_blank(),     panel.grid.minor.y = element_blank()   )  p"},{"path":"https://nsgrantham.github.io/ggbraid/articles/temps.html","id":"fun-with-ribbons","dir":"Articles","previous_headings":"","what":"Fun with Ribbons","title":"Average Daily Temperatures","text":"Let’s fill area two lines. can geom_ribbon() ggplot2. geom_ribbon() requires three aesthetics: x, ymin, ymax. can map date x geom_line(). However, ’ll need transform temps create new variables can map ymin ymax. particular, ’ll need pivot temps wider taking column names city values avg. straightforward pivot_wider() tidyr package. Call new data frame temps_wide. Now can add new layer p geom_ribbon() using temps_wide. Map date x, ny ymin, sf ymax.3 Finally, add transparency alpha = 0.3.  Great! Using geom_ribbon() ’ve added light grey ribbon runs two lines. second thought… used two colors ribbon? one color New York hotter San Francisco another color New York colder San Francisco. shouldn’t hard . Map sf > ny fill geom_ribbon() …  Chaos. happened?","code":"temps_wide <- temps %>%   pivot_wider(names_from = city, values_from = avg) %>%   rename(ny = `New York`, sf = `San Francisco`)  temps_wide #> # A tibble: 365 × 3 #>    date          ny    sf #>    <date>     <dbl> <dbl> #>  1 2021-01-01  36.5  51.5 #>  2 2021-01-02  43.5  50   #>  3 2021-01-03  36    50.5 #>  4 2021-01-04  39    54.5 #>  5 2021-01-05  39    50   #>  6 2021-01-06  37.5  50.5 #>  7 2021-01-07  35.5  53   #>  8 2021-01-08  32    52.5 #>  9 2021-01-09  30.5  52   #> 10 2021-01-10  35    50.5 #> # … with 355 more rows p +   geom_ribbon(     aes(x = date, ymin = ny, ymax = sf),     data = temps_wide,     alpha = 0.3   ) p +   geom_ribbon(     aes(x = date, ymin = ny, ymax = sf, fill = sf > ny),     data = temps_wide,     alpha = 0.7   )"},{"path":"https://nsgrantham.github.io/ggbraid/articles/temps.html","id":"the-unbraided-ribbon-problem","dir":"Articles","previous_headings":"","what":"The Unbraided Ribbon Problem","title":"Average Daily Temperatures","text":"bug geom_ribbon()? , ’s bug. problem haven’t dealt line intersections properly. example, consider rows 80-82 temps_wide: pass temps_wide geom_ribbon() map date x, ny ymin, sf ymax, sf > ny fill, get following: (x integer representation date, number days since January 1, 1970, “Unix epoch”) Ok, note middle row. ymin ymax equal , point two lines intersect. turns geom_ribbon() requires two rows every line intersection, one row fill FALSE another row fill TRUE. must insert new row data, yielding following: call process braiding. need braid ribbon lines intersect. intersection described type requires braiding. also many instances two lines intersect two rows data. cases, must use mathematical formula determine exact point lines intersect braid ribbon accordingly. ’s third, less common type intersection happens lines vertical x therefore intersect infinite number points.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/articles/temps.html","id":"braid-with-ggbraid","dir":"Articles","previous_headings":"","what":"Braid with ggbraid","title":"Average Daily Temperatures","text":"functions ggbraid take care braiding . Simply replace geom_ribbon() geom_braid().  go! Notice message geom_braid() using method = 'line'. Since ’ve drawn lines geom_line() must use method = 'line' determine point lines intersect intersection occurs two rows data. can silence message explicity including method = 'line' within geom_braid(). geom_braid() isn’t new geometry. takes data provided, performs necessary braiding operations , passes result geom_ribbon() drawing. ’d like, can still use geom_ribbon() set stat = 'braid'.  plot . ’ve also silenced message including method = 'line'. Finally, may helpful label ribbon colors ’s clear represent. can happen legend (’ve turned guides(fill = \"none\") layer p). Another possibility provide text annotations plot.","code":"p +   geom_braid(     aes(x = date, ymin = ny, ymax = sf, fill = sf > ny),     data = temps_wide,     alpha = 0.7   ) #> `geom_braid()` using method = 'line' p +   geom_ribbon(     aes(x = date, ymin = ny, ymax = sf, fill = sf > ny),     data = temps_wide,     stat = \"braid\",     method = \"line\",     alpha = 0.7   ) hues <- scales::hue_pal()(2)  # ggplot2 default color palette  p +   geom_braid(     aes(x = date, ymin = ny, ymax = sf, fill = sf > ny),     data = temps_wide,     method = \"line\",     alpha = 0.7   ) +   annotate(\"text\", x = as.Date(\"2021-09-10\"), y = 84, size = 4, label = \"NY hotter than SF\", hjust = 0, color = hues[1]) +   annotate(\"text\", x = as.Date(\"2021-02-20\"), y = 23, size = 4, label = \"NY colder than SF\", hjust = 0, color = hues[2])"},{"path":"https://nsgrantham.github.io/ggbraid/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Neal Grantham. Maintainer.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grantham N (2022). ggbraid: Braid two lines ribbon ggplot2. R package version 0.1.0, https://github.com/nsgrantham/ggbraid.","code":"@Manual{,   title = {ggbraid: Braid two lines and a ribbon in ggplot2},   author = {Neal Grantham},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/nsgrantham/ggbraid}, }"},{"path":"https://nsgrantham.github.io/ggbraid/index.html","id":"ggbraid","dir":"","previous_headings":"","what":"Braid two lines and a ribbon in ggplot2","title":"Braid two lines and a ribbon in ggplot2","text":"ggbraid provides new stat, stat_braid(), extends functionality geom_ribbon() correctly fill area two alternating lines (steps) two different colors. ggbraid also provides geom, geom_braid(), wraps geom_ribbon() uses stat_braid() default.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Braid two lines and a ribbon in ggplot2","text":"can install development version ggbraid GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nsgrantham/ggbraid\")"},{"path":"https://nsgrantham.github.io/ggbraid/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Braid two lines and a ribbon in ggplot2","text":"","code":"library(ggplot2) library(ggbraid) library(tidyr)  set.seed(42)  # for reproducibility  n <- 21  df_long <- tibble(   x = c(1:n, 1:n),   y = c(rnorm(n), rnorm(n, mean = 0.5)),   z = c(rep(\"a\", n), rep(\"b\", n)) )  df_long #> # A tibble: 42 × 3 #>        x       y z     #>    <int>   <dbl> <chr> #>  1     1  1.37   a     #>  2     2 -0.565  a     #>  3     3  0.363  a     #>  4     4  0.633  a     #>  5     5  0.404  a     #>  6     6 -0.106  a     #>  7     7  1.51   a     #>  8     8 -0.0947 a     #>  9     9  2.02   a     #> 10    10 -0.0627 a     #> # … with 32 more rows df_wide <- pivot_wider(df_long, names_from = z, values_from = y)  df_wide #> # A tibble: 21 × 3 #>        x       a       b #>    <int>   <dbl>   <dbl> #>  1     1  1.37   -1.28   #>  2     2 -0.565   0.328  #>  3     3  0.363   1.71   #>  4     4  0.633   2.40   #>  5     5  0.404   0.0695 #>  6     6 -0.106   0.243  #>  7     7  1.51   -1.26   #>  8     8 -0.0947  0.960  #>  9     9  2.02   -0.140  #> 10    10 -0.0627  0.955  #> # … with 11 more rows ggplot() +   geom_line(aes(x, y, linetype = z), data = df_long) +   geom_ribbon(aes(x, ymin = a, ymax = b), data = df_wide, alpha = 0.2) +    guides(linetype = \"none\") ggplot() +   geom_line(aes(x, y, linetype = z), data = df_long) +   geom_ribbon(aes(x, ymin = a, ymax = b, fill = a < b), data = df_wide, alpha = 0.6) +   guides(linetype = \"none\", fill = \"none\") ggplot() +   geom_line(aes(x, y, linetype = z), data = df_long) +   geom_braid(aes(x, ymin = a, ymax = b, fill = a < b), data = df_wide, alpha = 0.6) +   guides(linetype = \"none\", fill = \"none\") #> `geom_braid()` using method = 'line'"},{"path":"https://nsgrantham.github.io/ggbraid/reference/geom_braid.html","id":null,"dir":"Reference","previous_headings":"","what":"Braids — geom_braid","title":"Braids — geom_braid","text":"`geom_braid()` extension `geom_ribbon()` appropriately fill area two alternating lines different colors, whether one line .","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/geom_braid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Braids — geom_braid","text":"","code":"geom_braid(   mapping = NULL,   data = NULL,   stat = \"braid\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  stat_braid(   mapping = NULL,   data = NULL,   geom = \"braid\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":[]},{"path":"https://nsgrantham.github.io/ggbraid/reference/ggbraid-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggbraid: Fill the area between two alternating lines with `geom_braid()` — ggbraid-package","title":"ggbraid: Fill the area between two alternating lines with `geom_braid()` — ggbraid-package","text":"difficult properly fill area two lines `ggplot2`. Use `geom_ribbon()` encouraged, always work expected due potentional mismatch data `geom_ribbon()` requires data arranged. package introduces `geom_braid()`, substitute `geom_ribbon()` takes care details applying `geom_ribbon()`, resulting correctly filled area two alternating lines.","code":""}]
