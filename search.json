[{"path":"https://nsgrantham.github.io/ggbraid/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Neal Grantham Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/articles/court.html","id":"court-ideology","dir":"Articles","previous_headings":"","what":"Court Ideology","title":"US Supreme Court","text":"’ll start court.csv, provides Martin-Quinn score hypothetical “median justice” year since 1937. Let’s plot data court mapping year x, mqscore y, applying line geometry geom_line(). Also, place horizontal line yintercept = 0 geom_hline() better identify point ideology  nice, simple plot. Another way convey relationship instead map mqscore x year y. mapping, Martin-Quinn scores indicate conservative ideology right zero scores indicate liberal ideology left. matches left-right political spectrum accustomed , although put temporal variable y axis can feel strange. case, let’s give try. Starting previous code, switch year mqscore, replace geom_hline() geom_vline() yintercept = 0 xintercept = 0.  Hmmm, isn’t right. ’s gone wrong? problem geom_line() connects observations order variable x axis. , mapped mqscore x, geom_line() orders data mqscore drawing lines observations. ’s want, ’d rather geom leave order . avoid ordering behavior, can use geom_path() place geom_line().  Much better. plot really use color. can use geom_braid() fill area “median justice” Martin-Quinn score line x intercept 0.  Touching bit, can remove vertical line zero longer necessary, can remove fill aesthetic legend doesn’t add value. ’re , let’s change colors add transparency.  Voila.","code":"library(ggplot2) library(ggbraid) library(readr) library(dplyr)  court <- read_csv(     \"https://mqscores.lsa.umich.edu/media/2020/court.csv\",     col_types = cols_only(term = col_character(), med = col_double())   ) %>%   mutate(year = as.integer(substr(term, 1, 4))) %>%   group_by(year) %>%   summarize(mqscore = median(med), .groups = \"drop\") %>%   arrange(desc(year))  court #> # A tibble: 84 × 2 #>     year mqscore #>    <int>   <dbl> #>  1  2020   0.607 #>  2  2019   0.303 #>  3  2018   0.371 #>  4  2017   0.293 #>  5  2016  -0.058 #>  6  2015  -0.272 #>  7  2014  -0.224 #>  8  2013   0.066 #>  9  2012   0.244 #> 10  2011   0.302 #> # … with 74 more rows #> # ℹ Use `print(n = ...)` to see more rows ggplot(court, aes(x = year, y = mqscore)) +   geom_line() +   geom_hline(yintercept = 0) ggplot(court, aes(x = mqscore, y = year)) +   geom_line() +   geom_vline(xintercept = 0) ggplot(court, aes(x = mqscore, y = year)) +   geom_path() +   geom_vline(xintercept = 0) ggplot(court, aes(x = mqscore, y = year)) +   geom_path() +   geom_vline(xintercept = 0) +   geom_braid(     aes(xmin = mqscore, xmax = 0, fill = mqscore < 0),     method = \"line\"   ) ggplot(court, aes(x = mqscore, y = year)) +   geom_path() +   geom_braid(     aes(xmin = mqscore, xmax = 0, fill = mqscore < 0),     method = \"line\",     alpha = 0.3   ) +    scale_fill_manual(values = c(\"red\", \"blue\")) +   guides(fill = \"none\")"},{"path":"https://nsgrantham.github.io/ggbraid/articles/court.html","id":"justice-ideology","dir":"Articles","previous_headings":"","what":"Justice Ideology","title":"US Supreme Court","text":"Now may also valuable include data justices.csv, provides Martin-Quinn score every justice year since 1937. Let’s add individual Martin-Quinn score lines every justice.  Wow. come surprise individual justices hold much stronger ideologies hypothetical “median justice”. expect spread quite wide. Now, goal plot communicate exact Martin-Quinn score values, rather convey ideological lean court justices relative one another. let’s apply function pull largest values closer zero push smaller values one slightly away zero. ’ll call function moderate() primarily reduces extreme liberal conservative ideology scores. ’ve altered scores, let’s remove x axis ticks text.  looking better. Let’s select handful justices highlight. Now add two new geom layers: geom_path() using selected_justices geom_text() using selected_justices_text.","code":"justices <- read_csv(     \"https://mqscores.lsa.umich.edu/media/2020/justices.csv\",     col_types = cols_only(       term = col_integer(),       justiceName = col_character(),       post_med = col_double()     )   ) %>%   rename(year = term, name = justiceName, mqscore = post_med) %>%   arrange(desc(year), name)  justices #> # A tibble: 764 × 3 #>     year name        mqscore #>    <int> <chr>         <dbl> #>  1  2020 ACBarrett     0.981 #>  2  2020 BMKavanaugh   0.539 #>  3  2020 CThomas       3     #>  4  2020 EKagan       -1.49  #>  5  2020 JGRoberts     0.498 #>  6  2020 NMGorsuch     1.1   #>  7  2020 SAAlito       2.15  #>  8  2020 SGBreyer     -1.89  #>  9  2020 SSotomayor   -3.94  #> 10  2019 BMKavanaugh   0.552 #> # … with 754 more rows #> # ℹ Use `print(n = ...)` to see more rows ggplot(court, aes(x = mqscore, y = year)) +   geom_path() +   geom_braid(     aes(xmin = mqscore, xmax = 0, fill = mqscore < 0),     method = \"line\",     alpha = 0.3   ) +   geom_path(aes(group = name), data = justices, size = 0.3, alpha = 0.2) +   scale_fill_manual(values = c(\"red\", \"blue\")) +   guides(fill = \"none\") moderate <- function(x) sign(x) * sqrt(abs(x))  ggplot(court, aes(x = moderate(mqscore), y = year)) +   geom_path() +   geom_braid(     aes(xmin = moderate(mqscore), xmax = 0, fill = moderate(mqscore) < 0),     method = \"line\",     alpha = 0.3   ) +   geom_path(aes(group = name), data = justices, size = 0.3, alpha = 0.2) +   scale_fill_manual(values = c(\"red\", \"blue\")) +   guides(fill = \"none\") +   labs(x = NULL) +   theme(     panel.grid.major.x = element_blank(),     panel.grid.minor.x = element_blank(),     axis.ticks.x = element_blank(),     axis.text.x = element_blank()   ) selected_justice_names <- c(   \"RBGinsburg\" = \"Ginsburg\",   \"HABlackmun\" = \"Blackmun\",   \"TMarshall\" = \"Marshall\",   \"JHarlan2\" = \"Harlan II\",   \"WHRehnquist\" = \"Rehnquist\",   \"SDOConnor\" = \"O'Connor\",   \"EWarren\" = \"Warren\",   \"CThomas\" = \"Thomas\",   \"WODouglas\" = \"Douglas\" )  selected_justices <- justices %>%   filter(name %in% names(selected_justice_names)) %>%   mutate(name = recode(name, !!! selected_justice_names))  selected_justices #> # A tibble: 236 × 3 #>     year name     mqscore #>    <int> <chr>      <dbl> #>  1  2020 Thomas      3    #>  2  2019 Thomas      3.12 #>  3  2019 Ginsburg   -2.81 #>  4  2018 Thomas      3.16 #>  5  2018 Ginsburg   -2.83 #>  6  2017 Thomas      3.12 #>  7  2017 Ginsburg   -2.79 #>  8  2016 Thomas      3.18 #>  9  2016 Ginsburg   -2.74 #> 10  2015 Thomas      3.18 #> # … with 226 more rows #> # ℹ Use `print(n = ...)` to see more rows selected_justices_text <- selected_justices %>%   group_by(name) %>%   summarize(year = first(year), mqscore = first(mqscore), .groups = \"drop\")   selected_justices_text #> # A tibble: 9 × 3 #>   name       year mqscore #>   <chr>     <int>   <dbl> #> 1 Blackmun   1993  -1.92  #> 2 Douglas    1975  -7.94  #> 3 Ginsburg   2019  -2.81  #> 4 Harlan II  1970   0.769 #> 5 Marshall   1990  -4.29  #> 6 O'Connor   2005   0.069 #> 7 Rehnquist  2004   1.45  #> 8 Thomas     2020   3     #> 9 Warren     1968  -1.30 ggplot(court, aes(x = moderate(mqscore), y = year)) +   geom_path() +   geom_braid(     aes(xmin = moderate(mqscore), xmax = 0, fill = moderate(mqscore) < 0),     method = \"line\",     alpha = 0.3   ) +   geom_path(aes(group = name), data = justices, size = 0.3, alpha = 0.2) +   geom_path(aes(group = name), data = selected_justices, size = 0.5, alpha = 0.4) +   geom_text(aes(label = name), data = selected_justices_text, size = 3, alpha = 0.7, vjust = -0.7) +   scale_fill_manual(values = c(\"red\", \"blue\")) +   guides(fill = \"none\") +   labs(x = NULL) +   theme(     panel.grid.major.x = element_blank(),     panel.grid.minor.x = element_blank(),     axis.ticks.x = element_blank(),     axis.text.x = element_blank()   )"},{"path":"https://nsgrantham.github.io/ggbraid/articles/court.html","id":"final-ruling","dir":"Articles","previous_headings":"","what":"Final Ruling","title":"US Supreme Court","text":"Let’s put finishing touches plot.","code":"decades <- data.frame(year = seq(1940, 2020, by = 10))  ggplot(court, aes(x = moderate(mqscore), y = year)) +   geom_path(size = 0.8) +   geom_braid(     aes(xmin = moderate(mqscore), xmax = 0, fill = moderate(mqscore) < 0),     method = \"line\",     alpha = 0.3   ) +   geom_path(aes(group = name), data = justices, size = 0.3, alpha = 0.2) +   geom_path(aes(group = name), data = selected_justices, size = 0.5, alpha = 0.4) +   geom_text(aes(label = name), data = selected_justices_text, size = 4, alpha = 0.7, vjust = -0.7) +   geom_text(aes(label = year, x = 0), data = decades, size = 4, alpha = 0.4) +   annotate(\"rect\", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = Inf, fill = \"blue\", alpha = 0.06) +   annotate(\"rect\", xmin = 0, xmax = Inf, ymin = -Inf, ymax = Inf, fill = \"red\", alpha = 0.06) +   annotate(\"text\", x = 0, y = 2032, label = \"Ideological Leaning of the US Supreme Court\", fontface = \"bold\", size = 6.5) +   annotate(\"text\", x = 0, y = 2029, label = \"Adjusted Martin-Quinn scores of every justice serving since 1937\", size = 4) +   annotate(\"text\", x = 3, y = 1938.5, label = \"Data from mqscores.lsa.umich.edu\\nGraphic from nsgrantham.github.io/ggbraid/articles/court\", size = 3, hjust = 1) +   annotate(\"text\", x = -0.5, y = 2025, label = \"← More Liberal\", hjust = 1, color = \"blue\", size = 4.5, alpha = 0.6) +   annotate(\"text\", x = 0.5, y = 2025, label = \"More Conservative →\", hjust = 0, color = \"red\", size = 4.5, alpha = 0.6) +   annotate(\"text\", x = 0.75, y = 2021.1, label = \"Court Median\", fontface = \"bold\", size = 4) +   scale_x_continuous(limits = c(-3.05, 3.05), expand = c(0.01, 0.01)) +   scale_y_continuous(limits = c(NA, 2034.5), expand = c(0.01, 0.05)) +   scale_fill_manual(values = c(\"red\", \"blue\")) +   guides(fill = \"none\") +   labs(x = NULL, y = NULL) +   theme_minimal() +   theme(     plot.margin = margin(0, 0, -3, -3),     panel.grid.major.y = element_blank(),     panel.grid.minor.y = element_blank(),     panel.grid.major.x = element_blank(),     panel.grid.minor.x = element_blank(),     axis.text.y = element_blank(),     axis.text.x = element_blank()   )"},{"path":"https://nsgrantham.github.io/ggbraid/articles/hoops.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"NBA Finals Game","text":"ggbraid provides data frame called hoops points scored throughout course Game 1 2018 National Basketball Association (NBA) Finals Golden State Warriors Cleveland Cavaliers. time game time MM'SS\" format, team team responsible scoring, Golden State Warriors (GSW) Cleveland Cavaliers (CLE), points number points scored, either 1, 2, 3 (0, simply marking start end game).","code":"library(ggplot2) library(ggbraid) library(ggtext)  # element_markdown() library(dplyr) library(tidyr) library(glue)    # glue() library(hms)     # as_hms()  data(hoops)  hoops #> # A tibble: 129 × 3 #>    time   team  points #>    <time> <chr>  <dbl> #>  1 00'00\" CLE        0 #>  2 00'00\" GSW        0 #>  3 00'50\" CLE        2 #>  4 01'23\" CLE        2 #>  5 02'01\" GSW        3 #>  6 02'20\" CLE        2 #>  7 02'33\" GSW        2 #>  8 02'33\" GSW        1 #>  9 02'43\" CLE        1 #> 10 02'43\" CLE        1 #> # … with 119 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://nsgrantham.github.io/ggbraid/articles/hoops.html","id":"cumulative-score","dir":"Articles","previous_headings":"","what":"Cumulative Score","title":"NBA Finals Game","text":"Let’s transform hoops hoops_score cumulative score team time. Now plot cumulative scores ggplot() geom_step().1  bad. come think , compelling reason show cumulative score — negative points basketball cumulative score always goes right. Displaying data way add value. really care score margin, difference score GSW CLE point game.","code":"hoops_score <- hoops %>%   group_by(team) %>%   mutate(score = cumsum(points)) %>%   ungroup()  hoops_score #> # A tibble: 129 × 4 #>    time   team  points score #>    <time> <chr>  <dbl> <dbl> #>  1 00'00\" CLE        0     0 #>  2 00'00\" GSW        0     0 #>  3 00'50\" CLE        2     2 #>  4 01'23\" CLE        2     4 #>  5 02'01\" GSW        3     3 #>  6 02'20\" CLE        2     6 #>  7 02'33\" GSW        2     5 #>  8 02'33\" GSW        1     6 #>  9 02'43\" CLE        1     7 #> 10 02'43\" CLE        1     8 #> # … with 119 more rows #> # ℹ Use `print(n = ...)` to see more rows ggplot(hoops_score) +   geom_step(aes(x = time, y = score, color = team))"},{"path":"https://nsgrantham.github.io/ggbraid/articles/hoops.html","id":"score-margin","dir":"Articles","previous_headings":"","what":"Score Margin","title":"NBA Finals Game","text":"Transform hoops hoops_wide cle cumulative score Cavaliers, gsw cumulative score Warriors, diff difference (gsw - cle). Now plot hoops_wide add horizontal line 0 indicating tied game.  Better! Let’s improve aesthetics add details make clear ’s going .  data displayed way, ’s easy see game progressed. initial struggle Q1, Cavaliers took early lead Q2 Warriors claw back even score halftime. Q3, Warriors claimed lead, lost , reclaimed . Q4, Cavaliers evened score, ending game tie sending teams 5-minute overtime (OT1). Warriors quickly gained upper hand overtime won game 10 points.","code":"hoops_wide <- hoops %>%   group_by(time, team) %>%   summarize(points = sum(points), .groups = \"drop\") %>%   pivot_wider(names_from = team, values_from = points) %>%   rename_with(tolower) %>%   replace_na(list(cle = 0, gsw = 0)) %>%   mutate(     cle = cumsum(cle),     gsw = cumsum(gsw),     diff = gsw - cle   )  hoops_wide #> # A tibble: 108 × 4 #>    time     cle   gsw  diff #>    <time> <dbl> <dbl> <dbl> #>  1 00'00\"     0     0     0 #>  2 00'50\"     2     0    -2 #>  3 01'23\"     4     0    -4 #>  4 02'01\"     4     3    -1 #>  5 02'20\"     6     3    -3 #>  6 02'33\"     6     6     0 #>  7 02'43\"     8     6    -2 #>  8 02'57\"     8     8     0 #>  9 03'23\"     8    10     2 #> 10 03'35\"    10    10     0 #> # … with 98 more rows #> # ℹ Use `print(n = ...)` to see more rows ggplot(hoops_wide) +   geom_step(aes(x = time, y = diff)) +   geom_hline(yintercept = 0) gsw_color <- \"#006BB6\" cle_color <- \"#860038\"  p <- ggplot(hoops_wide) +   geom_step(aes(x = time, y = diff)) +   geom_hline(yintercept = 0) +   scale_x_time(     breaks = as_hms(c(\"00:00:00\", \"00:12:00\", \"00:24:00\", \"00:36:00\", \"00:48:00\", \"00:53:00\")),     labels = c(\"00:00\", \"12:00\", \"24:00\", \"36:00\", \"48:00\", \"53:00\"),     expand = c(0.015, -0.015)   ) +   scale_y_continuous(     breaks = seq(-12, 12, by = 1),     labels = c(       glue(\"<span style='color:{cle_color}'>+{12:1}<\/span>\"),       \"<span style='color:black'>0<\/span>\",       glue(\"<span style='color:{gsw_color}'>+{1:12}<\/span>\")     )   ) +   scale_fill_manual(values = c(cle_color, gsw_color)) +   guides(fill = \"none\") +   annotate(\"text\", x = as_hms(\"00:06:00\"), y = 11, label = \"Q1\", size = 6, color = \"lightgrey\") +   annotate(\"text\", x = as_hms(\"00:18:00\"), y = 11, label = \"Q2\", size = 6, color = \"lightgrey\") +   annotate(\"text\", x = as_hms(\"00:30:00\"), y = 11, label = \"Q3\", size = 6, color = \"lightgrey\") +   annotate(\"text\", x = as_hms(\"00:42:00\"), y = 11, label = \"Q4\", size = 6, color = \"lightgrey\") +   annotate(\"text\", x = as_hms(\"00:50:30\"), y = 11, label = \"OT1\", size = 6, color = \"lightgrey\") +   labs(     title = \"2018 NBA Finals Game 1\",     subtitle = glue(\"<span style='color:{gsw_color};'>Golden State Warriors<\/span> vs. <span style='color:{cle_color}'>Cleveland Cavaliers<\/span>\"),     y = NULL,     x = NULL   ) +   theme_minimal(base_size = 13) +   theme(     plot.title = element_markdown(size = 18),     plot.title.position = \"plot\",     plot.subtitle = element_markdown(size = 14, margin = margin(b = 1, unit = \"line\")),     axis.text.y = element_markdown(),     axis.text.x = element_text(color = \"grey60\"),     panel.grid.major.x = element_line(size = 0.5),     panel.grid.major.y = element_line(size = 0.3),     panel.grid.minor.x = element_blank(),     panel.grid.minor.y = element_blank()   )  p"},{"path":"https://nsgrantham.github.io/ggbraid/articles/hoops.html","id":"braiding-steps","dir":"Articles","previous_headings":"","what":"Braiding Steps","title":"NBA Finals Game","text":"additional detail, suppose want fill region score margin steps horizontal line 0. Maybe can use geom_ribbon() ?  Hmm, didn’t work. geom_ribbon() draw ribbon series drawn geom_step() — least, without little help. ggalt package provides stat_stepribbon() function geom_ribbon() can use draw “step ribbons.” ggbraid offers similar functionality. Simply replace geom_ribbon() geom_braid() set method = \"step\".  ’re , don’t color ribbon differently depending team winning?  😎🏀","code":"p +   geom_ribbon(     aes(x = time, ymin = diff, ymax = 0),     alpha = 0.2   ) p +   geom_braid(     aes(x = time, ymin = diff, ymax = 0),     method = \"step\",     alpha = 0.2   ) p +   geom_braid(     aes(x = time, ymin = diff, ymax = 0, fill = diff > 0),     method = \"step\",     alpha = 0.7   )"},{"path":"https://nsgrantham.github.io/ggbraid/articles/temps.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Average Daily Temperatures","text":"ggbraid provides data frame called temps, daily average temperatures New York San Francisco 2021 recorded US National Weather Service (NWS) weather.gov.1 city New York San Francisco, date calendar date YYYY-MM-DD format, avg average temperature recorded degrees Fahrenheit (°F) rounded nearest half degree.2 daily average temperatures look like?  see much higher variability temperatures New York compared San Francisco. makes sense — New York Northeastern US experiences hot, humid summers cold, occassionally snowy winters. San Francisco West Coast Mediterranean climate means temperature change much season season. proceed , let’s clean plot bit assign variable p can reuse throughout article.  Much better.","code":"library(ggplot2) library(ggbraid) library(dplyr) library(tidyr)  data(temps)  temps #> # A tibble: 730 × 3 #>    city     date         avg #>    <chr>    <date>     <dbl> #>  1 New York 2021-01-01  36.5 #>  2 New York 2021-01-02  43.5 #>  3 New York 2021-01-03  36   #>  4 New York 2021-01-04  39   #>  5 New York 2021-01-05  39   #>  6 New York 2021-01-06  37.5 #>  7 New York 2021-01-07  35.5 #>  8 New York 2021-01-08  32   #>  9 New York 2021-01-09  30.5 #> 10 New York 2021-01-10  35   #> # … with 720 more rows #> # ℹ Use `print(n = ...)` to see more rows ggplot(temps) +     geom_line(aes(x = date, y = avg, linetype = city)) p <- ggplot() +   geom_line(aes(x = date, y = avg, linetype = city), data = temps) +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b\") +   scale_y_continuous(     breaks = seq(20, 90, by = 10),     labels = function(x, ...) format(paste(x, \"°F\"), ...),     limits = c(18, 90)   ) +   guides(fill = \"none\") +   labs(     title = \"Average Daily Temperatures in 2021\",     linetype = NULL,     y = NULL,     x = NULL   ) +   theme_minimal(base_size = 14) +   theme(     plot.title = element_text(size = 15),     plot.title.position = \"plot\",     legend.position = c(0.75, 1.06),     legend.direction = \"horizontal\",     legend.key.size = unit(2, \"line\"),     legend.text = element_text(size = 12),     panel.grid.major.x = element_line(size = 0.4),     panel.grid.major.y = element_line(size = 0.4),     panel.grid.minor.x = element_blank(),     panel.grid.minor.y = element_blank()   )  p"},{"path":"https://nsgrantham.github.io/ggbraid/articles/temps.html","id":"fun-with-ribbons","dir":"Articles","previous_headings":"","what":"Fun with Ribbons","title":"Average Daily Temperatures","text":"Let’s fill area two lines. can geom_ribbon() ggplot2. geom_ribbon() requires three aesthetics: x, ymin, ymax. can map date x geom_line(). However, ’ll need transform temps create new variables can map ymin ymax. can pivot temps pivot_wider() tidyr package, taking column names city values avg. Call new data frame temps_wide. Now can add new layer p geom_ribbon() using temps_wide. Map date x, ny ymin, sf ymax.3 Finally, add transparency alpha = 0.3.  Great! Using geom_ribbon() ’ve added light grey ribbon runs two lines. second thought… used two colors ribbon? one color New York hotter San Francisco another color New York colder San Francisco. shouldn’t hard . Map sf > ny fill geom_ribbon() …  Chaos. happened?","code":"temps_wide <- temps %>%   pivot_wider(names_from = city, values_from = avg) %>%   rename(ny = `New York`, sf = `San Francisco`)  temps_wide #> # A tibble: 365 × 3 #>    date          ny    sf #>    <date>     <dbl> <dbl> #>  1 2021-01-01  36.5  51.5 #>  2 2021-01-02  43.5  50   #>  3 2021-01-03  36    50.5 #>  4 2021-01-04  39    54.5 #>  5 2021-01-05  39    50   #>  6 2021-01-06  37.5  50.5 #>  7 2021-01-07  35.5  53   #>  8 2021-01-08  32    52.5 #>  9 2021-01-09  30.5  52   #> 10 2021-01-10  35    50.5 #> # … with 355 more rows #> # ℹ Use `print(n = ...)` to see more rows p +   geom_ribbon(     aes(x = date, ymin = ny, ymax = sf),     data = temps_wide,     alpha = 0.3   ) p +   geom_ribbon(     aes(x = date, ymin = ny, ymax = sf, fill = sf > ny),     data = temps_wide,     alpha = 0.7   )"},{"path":"https://nsgrantham.github.io/ggbraid/articles/temps.html","id":"the-unbraided-ribbon-problem","dir":"Articles","previous_headings":"","what":"The Unbraided Ribbon Problem","title":"Average Daily Temperatures","text":"bug geom_ribbon()? , ’s bug. problem haven’t dealt line intersections properly. example, consider rows 80-82 temps_wide: pass temps_wide geom_ribbon() map date x, ny ymin, sf ymax, sf > ny fill, get following: (x integer representation date, number days since January 1, 1970, “Unix epoch”) Ok, note middle row. ymin ymax equal , point two lines intersect. turns geom_ribbon() requires two rows every line intersection, one row fill FALSE another row fill TRUE. must insert new row data, yielding following: call process braiding. need braid ribbon lines intersect. intersection described type requires braiding. instances two lines intersect two rows data. cases, must use mathematical formula determine exact point lines intersect braid ribbon accordingly. also instances lines vertical x, uncommon situation one produces infinite number intersection points requires braiding fix.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/articles/temps.html","id":"braiding-with-ggbraid","dir":"Articles","previous_headings":"","what":"Braiding with ggbraid","title":"Average Daily Temperatures","text":"functions ggbraid take care braiding . Simply replace geom_ribbon() geom_braid().  go! Notice message geom_braid() using method = 'line'. Since ’ve drawn lines geom_line() must use method = 'line' determine point lines intersect intersection occurs two rows data. can silence message explicity including method = 'line' within geom_braid(). geom_braid() takes data provided, performs necessary braiding operations stat_braid(), passes result geom_ribbon() drawing. ’d like, can still use geom_ribbon() set stat = 'braid'.  plot . ’ve also silenced message including method = 'line'. Finally, may helpful label ribbon colors ’s clear represent. can happen legend (’ve turned guides(fill = \"none\") layer p). Another possibility provide text annotations plot.","code":"p +   geom_braid(     aes(x = date, ymin = ny, ymax = sf, fill = sf > ny),     data = temps_wide,     alpha = 0.7   ) #> `geom_braid()` using method = 'line' p +   geom_ribbon(     aes(x = date, ymin = ny, ymax = sf, fill = sf > ny),     data = temps_wide,     stat = \"braid\",     method = \"line\",     alpha = 0.7   ) hues <- scales::hue_pal()(2)  # ggplot2 default color palette  p +   geom_braid(     aes(x = date, ymin = ny, ymax = sf, fill = sf > ny),     data = temps_wide,     method = \"line\",     alpha = 0.7   ) +   annotate(\"text\", x = as.Date(\"2021-09-10\"), y = 84, size = 4, label = \"NY hotter than SF\", hjust = 0, color = hues[1]) +   annotate(\"text\", x = as.Date(\"2021-02-20\"), y = 23, size = 4, label = \"NY colder than SF\", hjust = 0, color = hues[2])"},{"path":"https://nsgrantham.github.io/ggbraid/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Neal Grantham. Author, maintainer.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grantham N (2022). ggbraid: Braid Ribbons 'ggplot2'. https://nsgrantham.github.io/ggbraid/, https://github.com/nsgrantham/ggbraid/.","code":"@Manual{,   title = {ggbraid: Braid Ribbons in 'ggplot2'},   author = {Neal Grantham},   year = {2022},   note = {https://nsgrantham.github.io/ggbraid/, https://github.com/nsgrantham/ggbraid/}, }"},{"path":"https://nsgrantham.github.io/ggbraid/index.html","id":"ggbraid-","dir":"","previous_headings":"","what":"Braid Ribbons in ggplot2","title":"Braid Ribbons in ggplot2","text":"ggbraid provides new stat, stat_braid(), extends functionality geom_ribbon() correctly fill area two alternating lines (steps) two different colors. ggbraid also provides geom, geom_braid(), wraps geom_ribbon() uses stat_braid() default.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Braid Ribbons in ggplot2","text":"can install development version ggbraid GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"nsgrantham/ggbraid\")"},{"path":"https://nsgrantham.github.io/ggbraid/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Braid Ribbons in ggplot2","text":"demonstrate, let’s generate long dataset two alternating series. let’s pivot dataset wider can use geom_ribbon() geom_braid(). Now let’s draw two series lines fill area single color using geom_ribbon().  Can fill area two lines two different colors? One color solid line dashed line, different color solid line dashed line? shouldn’t hard. Let’s map < b fill aesthetic geom_ribbon() …  Chaos. happened? “Unbraided Ribbon Problem”. worry, can braid unbraided ribbon ggbraid — simply replace geom_ribbon() geom_braid().","code":"library(ggplot2) library(ggbraid) library(tidyr)  set.seed(42)  # for reproducibility  n <- 21  df_long <- tibble(   x = c(1:n, 1:n),   y = c(rnorm(n), rnorm(n, mean = 0.5)),   z = c(rep(\"a\", n), rep(\"b\", n)) )  df_long #> # A tibble: 42 × 3 #>        x       y z     #>    <int>   <dbl> <chr> #>  1     1  1.37   a     #>  2     2 -0.565  a     #>  3     3  0.363  a     #>  4     4  0.633  a     #>  5     5  0.404  a     #>  6     6 -0.106  a     #>  7     7  1.51   a     #>  8     8 -0.0947 a     #>  9     9  2.02   a     #> 10    10 -0.0627 a     #> # … with 32 more rows df_wide <- pivot_wider(df_long, names_from = z, values_from = y)  df_wide #> # A tibble: 21 × 3 #>        x       a       b #>    <int>   <dbl>   <dbl> #>  1     1  1.37   -1.28   #>  2     2 -0.565   0.328  #>  3     3  0.363   1.71   #>  4     4  0.633   2.40   #>  5     5  0.404   0.0695 #>  6     6 -0.106   0.243  #>  7     7  1.51   -1.26   #>  8     8 -0.0947  0.960  #>  9     9  2.02   -0.140  #> 10    10 -0.0627  0.955  #> # … with 11 more rows ggplot() +   geom_line(aes(x, y, linetype = z), data = df_long) +   geom_ribbon(aes(x, ymin = a, ymax = b), data = df_wide, alpha = 0.2) +   guides(linetype = \"none\") ggplot() +   geom_line(aes(x, y, linetype = z), data = df_long) +   geom_ribbon(aes(x, ymin = a, ymax = b, fill = a < b), data = df_wide, alpha = 0.6) +   guides(linetype = \"none\", fill = \"none\") ggplot() +   geom_line(aes(x, y, linetype = z), data = df_long) +   geom_braid(aes(x, ymin = a, ymax = b, fill = a < b), data = df_wide, alpha = 0.6) +   guides(linetype = \"none\", fill = \"none\") #> `geom_braid()` using method = 'line'"},{"path":"https://nsgrantham.github.io/ggbraid/index.html","id":"articles","dir":"","previous_headings":"","what":"Articles","title":"Braid Ribbons in ggplot2","text":"introduction ggbraid “Unbraided Ribbon Problem”, see Average Daily Temperatures. learn use geom_braid() geom_step(), see NBA Finals Game. ggbraid supports flipped aesthetics, see US Supreme Court.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/geom_braid.html","id":null,"dir":"Reference","previous_headings":"","what":"Braided ribbons — geom_braid","title":"Braided ribbons — geom_braid","text":"geom_braid() extension geom_ribbon() uses stat_braid() correctly fill area two alternating series (lines steps) two different colors.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/geom_braid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Braided ribbons — geom_braid","text":"","code":"geom_braid(   mapping = NULL,   data = NULL,   position = \"identity\",   ...,   method = NULL,   na.rm = NA,   show.legend = NA,   inherit.aes = TRUE )  stat_braid(   mapping = NULL,   data = NULL,   geom = \"braid\",   position = \"identity\",   ...,   method = NULL,   na.rm = NA,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://nsgrantham.github.io/ggbraid/reference/geom_braid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Braided ribbons — geom_braid","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. method Intersection imputation method use braid ribbon, accepts NULL, \"line\", \"step\". method = NULL, default, print message console use method = \"line\". method = \"line\", silently braid ribbon two series drawn geom_line() geom_path(). method = \"step\", silently braid ribbon two series drawn geom_step(). na.rm NA, default, missing values imputed method. FALSE, missing values kept appear gaps ribbon. TRUE, missing values removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). geom Override default connection geom_braid().","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/geom_braid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Braided ribbons — geom_braid","text":"ggplot2 layer can added plot created ggplot().","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/geom_braid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Braided ribbons — geom_braid","text":"","code":"library(ggplot2)  # To demonstrate the features of `geom_braid()` we'll use a subset of the # `txhousing` dataset from ggplot2.  tx_long <- with(txhousing, txhousing[city %in% c(\"Dallas\", \"Austin\"), ]) tx_long <- with(tx_long, tx_long[date >= 2008, ]) tx_long <- subset(tx_long, select = c(date, city, inventory))  tx_wide <- data.frame(   date = with(tx_long, date[city == \"Dallas\"]),   dallas = with(tx_long, inventory[city == \"Dallas\"]),   austin = with(tx_long, inventory[city == \"Austin\"]) ) tx_wide <- with(tx_wide, tx_wide[date >= 2008, ])  p <- ggplot(tx_long, aes(date))  p + geom_line(aes(y = inventory, linetype = city))   # Use `geom_braid()` to draw a ribbon between the two lines, just as we would # with `geom_ribbon()`. p +   geom_line(aes(y = inventory, linetype = city)) +   geom_braid(aes(ymin = austin, ymax = dallas), data = tx_wide, alpha = 0.3) #> `geom_braid()` using method = 'line'   # Now fill the ribbon between the two series with different colors depending # on which series is over or under the other. Do so by mapping any of the # following to the `fill` aesthetic: #   `austin < dallas` #   `austin > dallas` #   `austin <= dallas` #   `austin >= dallas` p +   geom_line(aes(y = inventory, linetype = city)) +   geom_braid(     aes(ymin = austin, ymax = dallas, fill = austin > dallas),     data = tx_wide,     method = \"line\",     alpha = 0.6   )   # Alternatively, map `after_stat(braid)` to `fill` which will apply # `ymin < ymax` by default, in this case `austin < dallas` p +   geom_line(aes(y = inventory, linetype = city)) +   geom_braid(     aes(ymin = austin, ymax = dallas, fill = after_stat(braid)),     data = tx_wide,     method = \"line\",     alpha = 0.6   )   # To braid a ribbon with two series drawn with `geom_step()`, use # `method = \"step\"` in `geom_braid()`. p +   geom_step(aes(y = inventory, linetype = city)) +   geom_braid(     aes(ymin = austin, ymax = dallas),     data = tx_wide,     method = \"step\",     alpha = 0.3   )   p +   geom_step(aes(y = inventory, linetype = city)) +   geom_braid(     aes(ymin = austin, ymax = dallas, fill = austin < dallas),     data = tx_wide,     method = \"step\",     alpha = 0.6   )   # How does `geom_braid()` handle missing values? Let's replace some existing # values with `NA`s to demonstrate.  set.seed(42)  # for reproducibility  tx_long[sample(1:nrow(tx_long), 20), \"inventory\"] <- NA  tx_wide <- transform(tx_wide,   dallas = with(tx_long, inventory[city == \"Dallas\"]),   austin = with(tx_long, inventory[city == \"Austin\"]) )  p <- ggplot(tx_long, aes(date))  p + geom_line(aes(y = inventory, linetype = city), na.rm = TRUE)   # If `na.rm = NA`, the default, `geom_braid()` imputes missing values that # occur between observations in a series. p +   geom_line(aes(y = inventory, linetype = city), na.rm = TRUE) +   geom_braid(     aes(ymin = austin, ymax = dallas, fill = austin < dallas),     data = tx_wide,     method = \"line\",     alpha = 0.6   )   # If `na.rm = FALSE`, `geom_braid()` keeps the missing values and portrays # them as gaps in the ribbon. p +   geom_line(aes(y = inventory, linetype = city), na.rm = TRUE) +   geom_braid(     aes(ymin = austin, ymax = dallas, fill = austin < dallas),     data = tx_wide,     method = \"line\",     alpha = 0.6,     na.rm = FALSE   )   # If `na.rm = TRUE`, `geom_braid()` removes the missing values. However, # because this removes rows in `tx_wide` where only one of `austin` and # `dallas` may be missing, the resulting ribbon will likely not match the # lines drawn with `geom_line()` using `tx_long`. p +   geom_line(aes(y = inventory, linetype = city), na.rm = TRUE) +   geom_braid(     aes(ymin = austin, ymax = dallas, fill = austin < dallas),     data = tx_wide,     method = \"line\",     alpha = 0.6,     na.rm = TRUE   )   # Happy braiding!"},{"path":"https://nsgrantham.github.io/ggbraid/reference/ggbraid-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"Proto braid — GeomBraid","title":"Proto braid — GeomBraid","text":"Proto braid Proto braid","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/ggbraid-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggbraid: Braid Ribbons in 'ggplot2' — ggbraid-package","title":"ggbraid: Braid Ribbons in 'ggplot2' — ggbraid-package","text":"new stat, stat_braid(), extends functionality geom_ribbon() correctly fill area two alternating lines (steps) two different colors, geom, geom_braid(), wraps geom_ribbon() uses stat_braid() default.","code":""},{"path":[]},{"path":"https://nsgrantham.github.io/ggbraid/reference/ggbraid-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggbraid: Braid Ribbons in 'ggplot2' — ggbraid-package","text":"Maintainer: Neal Grantham neal@nsgrantham.com","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/hoops.html","id":null,"dir":"Reference","previous_headings":"","what":"NBA Finals Game — hoops","title":"NBA Finals Game — hoops","text":"dataset containing points scored Game 1 2018 National Basketball Association (NBA) Finals May 31, 2018 Golden State Warriors Cleveland Cavaliers.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/hoops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NBA Finals Game — hoops","text":"","code":"hoops"},{"path":"https://nsgrantham.github.io/ggbraid/reference/hoops.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NBA Finals Game — hoops","text":"data frame (specifically tbl_df) 129 rows 3 variables: time Game time team Golden State Warriors (GSW) Cleveland Cavaliers (CLE) points Points scored, either 1, 2, 3 (0, cases mark start end game)","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/hoops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NBA Finals Game — hoops","text":"","code":"hoops #> # A tibble: 129 × 3 #>    time     team  points #>    <drtn>   <chr>  <dbl> #>  1   0 secs CLE        0 #>  2   0 secs GSW        0 #>  3  50 secs CLE        2 #>  4  83 secs CLE        2 #>  5 121 secs GSW        3 #>  6 140 secs CLE        2 #>  7 153 secs GSW        2 #>  8 153 secs GSW        1 #>  9 163 secs CLE        1 #> 10 163 secs CLE        1 #> # … with 119 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://nsgrantham.github.io/ggbraid/reference/temps.html","id":null,"dir":"Reference","previous_headings":"","what":"Average Daily Temperatures — temps","title":"Average Daily Temperatures — temps","text":"dataset containing daily average temperatures New York San Francisco 2021 recorded US National Weather Service (NWS) weather.gov.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/temps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average Daily Temperatures — temps","text":"","code":"temps"},{"path":"https://nsgrantham.github.io/ggbraid/reference/temps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Average Daily Temperatures — temps","text":"data frame (specifically tbl_df) 730 rows 3 variables: city New York San Francisco date Date YYYY-MM-DD format avg Average temperature degrees Fahrenheit (°F) rounded nearest half degree","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/temps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Average Daily Temperatures — temps","text":"difficult pull data NWS. provide data via API data returns point--click interface plain text format! make matters worse, can retrieve data city one month time. San Francisco, visit https://www.weather.gov/wrh/climate?wfo=mtr choose \"San Francisco City, CA\", \"Daily data month\", month 2021; New York, visit https://www.weather.gov/wrh/climate?wfo=okx choose \"NY-Central Park Area\", \"Daily data month\", month 2021. Copy paste data spreadsheet software processing.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/reference/temps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average Daily Temperatures — temps","text":"","code":"temps #> # A tibble: 730 × 3 #>    city     date         avg #>    <chr>    <date>     <dbl> #>  1 New York 2021-01-01  36.5 #>  2 New York 2021-01-02  43.5 #>  3 New York 2021-01-03  36   #>  4 New York 2021-01-04  39   #>  5 New York 2021-01-05  39   #>  6 New York 2021-01-06  37.5 #>  7 New York 2021-01-07  35.5 #>  8 New York 2021-01-08  32   #>  9 New York 2021-01-09  30.5 #> 10 New York 2021-01-10  35   #> # … with 720 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://nsgrantham.github.io/ggbraid/news/index.html","id":"ggbraid-022","dir":"Changelog","previous_headings":"","what":"ggbraid 0.2.2","title":"ggbraid 0.2.2","text":"CRAN release: 2022-05-17 Released 2022-05-08 Add documentation datasets temps hoops Fix warnings notes R CMD check","code":""},{"path":"https://nsgrantham.github.io/ggbraid/news/index.html","id":"ggbraid-021","dir":"Changelog","previous_headings":"","what":"ggbraid 0.2.1","title":"ggbraid 0.2.1","text":"Released 2022-04-27 Fixed problem braiding fails x non-numeric","code":""},{"path":"https://nsgrantham.github.io/ggbraid/news/index.html","id":"ggbraid-020","dir":"Changelog","previous_headings":"","what":"ggbraid 0.2.0","title":"ggbraid 0.2.0","text":"Released 2022-04-25 Handle NAs na.rm = NA (default), na.rm = FALSE, na.rm = TRUE. Add support flipped aesthetics y, xmin, xmax. Add support after_stat() — use fill = after_stat(braid). Update documentation stat_braid() geom_braid() examples. Add “US Supreme Court” vignette finish “NBA Finals Game” vignette.","code":""},{"path":"https://nsgrantham.github.io/ggbraid/news/index.html","id":"ggbraid-010","dir":"Changelog","previous_headings":"","what":"ggbraid 0.1.0","title":"ggbraid 0.1.0","text":"Released 2022-03-22 Add stat_braid() geom_braid(). Add “Average Daily Temperatures” “NBA Finals Game” vignettes.","code":""}]
